# Configuración para WebSocket
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Variable para el origen permitido
map $http_origin $cors_origin {
    default "";
    "~^https?://localhost(:[0-9]+)?$" "$http_origin";
    "~^https?://127\.0\.0\.1(:[0-9]+)?$" "$http_origin";
    "~^https?://[a-zA-Z0-9-]+\.ngrok-free\.app$" "$http_origin";
    "~^https?://sada\.faa\.mil\.ar$" "$http_origin";  # Tu dominio
    # Agrega aquí otros dominios permitidos
}

server {
    listen 80;
    server_name localhost;

    # Configuración para confiar en el proxy inverso
    set_real_ip_from 192.168.0.15;  # IP del proxy Apache
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Configuración de CORS más segura
    add_header 'Access-Control-Allow-Origin' $cors_origin always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    add_header 'Access-Control-Allow-Credentials' 'true' always;

    # Configuración de seguridad adicional
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self' https: data: 'unsafe-inline' 'unsafe-eval';" always;

    root /usr/share/nginx/html/index;
    index index.html;

    # Configuración de MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Configuración específica para JavaScript
    types {
        application/javascript js;
        text/javascript js;
    }

    error_page 404 /Error/Error404.html;

    location = / {
        root /usr/share/nginx/html/Login;
        try_files $uri /login.html;
    }

    location / {
        root /usr/share/nginx/html/Index;
        try_files $uri /index.html;
    }

    location /index {
        root /usr/share/nginx/html/Index;
        try_files $uri /index.html;
    }

    location /login {
        root /usr/share/nginx/html/Login;
        try_files $uri /login.html;
    }

    location /change-password {
        root /usr/share/nginx/html/Change-password;
        try_files $uri /change-password.html;
    }

    location /forgot-password {
        root /usr/share/nginx/html/Forgot-password;
        try_files $uri /forgot-password.html;
    }

    location /register {
        root /usr/share/nginx/html/Register;
        try_files $uri /register.html;
    }

    location /records { 
        root /usr/share/nginx/html/Records;
        try_files $uri /records.html;
    }

    location /users { 
        root /usr/share/nginx/html/Users;
        try_files $uri /users.html;
    }

    location /static {
        alias /usr/share/nginx/html/assets;
        try_files $uri =404;
    }

    location /utils {
        alias /usr/share/nginx/html/utils;
        try_files $uri =404;
        add_header Content-Type "application/javascript" always;
    }

    location /src {
        alias /usr/share/nginx/html/src;
        try_files $uri =404;
        add_header Content-Type "application/javascript" always;
    }

    location /Error {
        alias /usr/share/nginx/html/Error;
        try_files $uri /Error404.html;
    }

    location /api/ {
        proxy_pass http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # CORS específico para API
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    }

    location /socket.io/ {
        proxy_pass http://backend:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 86400;
        
        # Configuración para proxy inverso
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        
        # CORS específico para WebSocket
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
    }

    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}